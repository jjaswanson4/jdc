---

- name: provision managed windows hosts
  hosts:
    - all
  gather_facts: no
  pre_tasks:
    - name: run tasks from localhost
      block:
        - name: get auth token for netbox
          ansible.builtin.uri:
            url: "{{ netbox_url }}/api/users/tokens/provision/"
            validate_certs: "{{ netbox_validate_certs | default(omit) }}"
            method: POST
            status_code: 201
            body_format: json
            body:
              username: "{{ netbox_username }}"
              password: "{{ netbox_password }}"
          register: netbox_auth_token_raw
          throttle: 5
        - name: set netbox token fact
          ansible.builtin.set_fact:
            netbox_token: "{{ netbox_auth_token_raw.json.key }}"
        - name: get cmdb record
          ansible.builtin.uri:
            url: "{{ netbox_url }}/api/virtualization/virtual-machines/?name={{ inventory_hostname }}"
            validate_certs: "{{ netbox_validate_certs | default(omit) }}"
            headers:
              Authorization: Token {{ netbox_token }}
          throttle: 5
          register: cmdb_record_raw
        - name: set ip address fact
          ansible.builtin.set_fact:
            ip_address: "{{ cmdb_record_raw.json.results[0].primary_ip.address.split('/')[0] }}"
      delegate_to: localhost
  tasks:
    - name: provision windows vm
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        cluster: "{{ vcenter_cluster }}"
        name: "{{ inventory_hostname }}"
        folder: "{{ vm.folder }}"
        template: "{{ vm.os }}-template"
        networks: "{{ vm.networks }}"
        hardware: "{{ vm.hardware }}"
        customization: "{{ vm.customization }}"
        wait_for_customization: yes
      delegate_to: localhost        
    
    - name: ensure vm can be connected to
      ansible.builtin.wait_for_connection:
        timeout: 120
        sleep: 5

- name: enforce base system configuration
  hosts:
    - all
  tasks:
    - name: set hostname
      ansible.windows.win_hostname:
        name: "{{ inventory_hostname.split('.')[0] }}"
      notify: reboot
    - name: speed up powershell
      ansible.windows.win_powershell:
        script: |
          function Optimize-PowershellAssemblies {
            # NGEN powershell assembly, improves startup time of powershell by 10x
            $old_path = $env:path
            try {
              $env:path = [Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory()
              [AppDomain]::CurrentDomain.GetAssemblies() | % {
                if (! $_.location) {continue}
                $Name = Split-Path $_.location -leaf
                if ($Name.startswith("Microsoft.PowerShell.")) {
                  Write-Progress -Activity "Native Image Installation" -Status "$name"
                  ngen install $_.location | % {"`t$_"}
                }
              }
            } finally {
              $env:path = $old_path
            }
          }
          Optimize-PowershellAssemblies
  handlers:
    - name: reboot if needed
      ansible.windows.win_reboot:
      listen:
        - reboot
