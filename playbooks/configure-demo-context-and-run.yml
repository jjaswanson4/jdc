---

- name: create demo context and run the demo provisioner workflow
  hosts:
    - all
  gather_facts: false
  vars:
    controller_hosts_to_add: []
  vars_files:
    - vars/demos.yml
  pre_tasks:
    - name: match demo to display name
      ansible.builtin.set_fact:
        demo_display_name: "{{ demos.display_name }}"
      when:
        - demo == demos.name
      loop_control:
        loop_var: demos
      loop: "{{ available_demos }}"
    
    # set demo_uuid
    - name: create unique id for demo if not existing
      block:
        - name: create unique id for demo instance
          ansible.builtin.shell:
            cmd: uuidgen | cut -c1-4
          register: demo_uuid_raw
        - name: set unique id fact
          ansible.builtin.set_fact:
            demo_uuid: "{{ demo_uuid_raw.stdout }}"
      when:
        - demo_uuid is not defined

    # set workflow to run
    - name: set workflow to run
      block:
        - name: set workflow to run | provision
          ansible.builtin.set_fact:
            workflow_to_run: Provision
          when:
            - demo_state is not defined or
              demo_state == 'present'
        - name: set workflow to run | teardown
          ansible.builtin.set_fact:
            workflow_to_run: Teardown
          when:
            - demo_state is defined
            - demo_state == 'absent'
        - name: set workflow to run | reset
          ansible.builtin.set_fact:
            workflow_to_run: Reset
          when:
            - demo_state is defined
            - demo_state == 'reset'
    
    # setup demo inventory
    - name: set demo inventory
      block:
        - name: load demo provisioner vars into tmp var
          ansible.builtin.include_vars:
            file: "vars/demos/{{ demo }}/provisioner.yml"
        - name: load in initial inventory vars
          ansible.builtin.set_fact:
            inventory_vars: "{{ lookup('file', 'vars/controller/inventories.yml') | from_yaml }}"
        - name: collect up additional vars to add to inventory
          ansible.builtin.set_fact:
            additional_inventory_vars:
              demo_uuid: "{{ demo_uuid }}"
              audience: "{{ audience }}"
              custom_dns_zones: "{{ custom_dns_zones | default(omit) }}"
        - name: set inventories facts
          ansible.builtin.set_fact:
            controller_inventories:
              - name: "Demo {{ demo_uuid }} Inventory"
                organization: "{{ controller_organization }}"
                variables: "{{ inventory_vars | combine(additional_inventory_vars) }}"

    # setup satellite if defined
    - name: load in satellite vars and group
      block:
        - name: set satellite host and group facts
          ansible.builtin.set_fact:
            satellite_host:
              - name: "{{ audience | lower }}-{{ demo }}-satellite.{{ demo_uuid }}.{{ base_dns_suffix }}"
                inventory: "Demo {{ demo_uuid }} Inventory"
                variables: "{{ lookup('file', 'vars/demos/' + demo + '/satellite.yml') | from_yaml }}"
            satellite_group:
              - name: satellite
                inventory: "Demo {{ demo_uuid }} Inventory"
                hosts:
                  - "{{ audience | lower }}-{{ demo }}-satellite.{{ demo_uuid }}.{{ base_dns_suffix }}"
        - name: add satellite host to main list
          ansible.builtin.set_fact:
            controller_hosts_to_add: "{{ controller_hosts_to_add + satellite_host }}"
      when:
        - satellite_configuration_file is defined
    - name: define satellite group even if empty
      ansible.builtin.set_fact:
        satellite_group:
          - name: satellite
            inventory: "Demo {{ demo_uuid }} Inventory"
      when:
        - satellite_configuration_file is not defined
    
    # setup controller if defined
    - name: load in controller vars and group
      block:
        - name: set controller host and group facts
          ansible.builtin.set_fact:
            controller_host:
              - name: "{{ audience | lower }}-{{ demo }}-controller.{{ demo_uuid }}.{{ base_dns_suffix }}"
                inventory: "Demo {{ demo_uuid }} Inventory"
                variables: "{{ lookup('file', 'vars/demos/' + demo + '/controller.yml') | from_yaml }}"
            controller_group:
              - name: controller
                inventory: "Demo {{ demo_uuid }} Inventory"
                hosts:
                  - "{{ audience | lower }}-{{ demo }}-controller.{{ demo_uuid }}.{{ base_dns_suffix }}"
        - name: add controller host to main list
          ansible.builtin.set_fact:
            controller_hosts_to_add: "{{ controller_hosts_to_add + controller_host }}"
      when:
        - controller_configuration_file is defined
    - name: define controller group even if empty
      ansible.builtin.set_fact:
        controller_group:
          - name: controller
            inventory: "Demo {{ demo_uuid }} Inventory"
      when:
        - controller_configuration_file is not defined

    # setup hub if defined
    - name: load in hub vars and group
      block:
        - name: set hub host and group facts
          ansible.builtin.set_fact:
            hub_host:
              - name: "{{ audience | lower }}-{{ demo }}-hub.{{ demo_uuid }}.{{ base_dns_suffix }}"
                inventory: "Demo {{ demo_uuid }} Inventory"
                variables: "{{ lookup('file', 'vars/demos/' + demo + '/hub.yml') | from_yaml }}"
            hub_group:
              - name: hub
                inventory: "Demo {{ demo_uuid }} Inventory"
                hosts:
                  - "{{ audience | lower }}-{{ demo }}-hub.{{ demo_uuid }}.{{ base_dns_suffix }}"
        - name: add hub host to main list
          ansible.builtin.set_fact:
            controller_hosts_to_add: "{{ controller_hosts_to_add + hub_host }}"
      when:
        - hub_configuration_file is defined
    - name: define hub group even if empty
      ansible.builtin.set_fact:
        hub_group:
          - name: hub
            inventory: "Demo {{ demo_uuid }} Inventory"
      when:
        - hub_configuration_file is not defined

    # setup ansible_automation_platform group
    - name: setup ansible_automation_platform group
      ansible.builtin.set_fact:
        ansible_automation_platform_group:
          - name: ansible_automation_platform
            inventory: "Demo {{ demo_uuid }} Inventory"
            variables: "{{ lookup('file', 'vars/controller/groups/ansible_automation_platform.yml') | from_yaml }}"
            children:
              - controller
              - hub

    # setup management group
    - name: load in management_plane group
      ansible.builtin.set_fact:
        management_plane_group:
          - name: management_plane
            inventory: "Demo {{ demo_uuid }} Inventory"
            variables: "{{ lookup('file', 'vars/controller/groups/management_plane.yml') | from_yaml }}"
            children:
              - ansible_automation_platform
              - satellite

    # setup localhost
    - name: create localhost host
      ansible.builtin.set_fact:
        localhost_host:
          - name: localhost
            inventory: "Demo {{ demo_uuid }} Inventory"
            variables:
              ansible_connection: local
              ansible_python_interpreter: '{  { ansible_playbook_python }}'
              custom_dns_zones: "{{ custom_dns_zones | default(omit) }}"
    - name: add localhost to hosts list
      ansible.builtin.set_fact:
        controller_hosts_to_add: "{{ controller_hosts_to_add + localhost_host }}"

    # setup hosts var for controller config role
    - name: set hosts var for controller config role
      ansible.builtin.set_fact:
        controller_hosts: "{{ controller_hosts | default([]) + controller_hosts_to_add }}"

    # add groups to correct group tiers
    - name: override group tiers to atleast 3
      ansible.builtin.set_fact:
        controller_group_tiers: 3
      when:
        controller_group_tiers | int < 3
    - name: add satellite, controller, and hub groups to tier1
      ansible.builtin.set_fact:
        controller_groups_tier1: "{{ controller_groups_tier1 | default([]) + satellite_group + controller_group + hub_group }}"
    - name: add ansible_automation_platform group to tier2
      ansible.builtin.set_fact:
        controller_groups_tier2: "{{ controller_groups_tier2 | default([]) + ansible_automation_platform_group }}"
    - name: add management_plane group to tier3
      ansible.builtin.set_fact:
        controller_groups_tier3: "{{ controller_groups_tier3 | default([]) + management_plane_group }}"

    # set vars for workflow run
    - name: set demo provisioner workflow facts
      ansible.builtin.set_fact:
        controller_workflow_launch_jobs:
          - name: "{{ workflow_to_run }} {{ demo_display_name }} Demo"
            inventory: "Demo {{ demo_uuid }} Inventory"
            wait: yes
            timeout: 21600
            extra_vars:
              audience: "{{ audience }}"
              demo_state: "{{ demo_state | default('present') }}"
              demo_context_state: "{{ demo_context_state | default('present') }}"
              provisioner: "{{ provisioner }}"
              provisioner_email: "{{ provisioner_email }}"
              base_dns_suffix: "{{ base_dns_suffix }}"
              demo_uuid: "{{ demo_uuid }}"
              demo_display_name: "{{ demo_display_name }}"
    - name: get auth token for netbox
      ansible.builtin.uri:
        url: "{{ netbox_url }}/api/users/tokens/provision/"
        validate_certs: "{{ netbox_validate_certs | default(omit) }}"
        method: POST
        status_code: 201
        body_format: json
        body:
          username: "{{ netbox_username }}"
          password: "{{ netbox_password }}"
      register: netbox_auth_token_raw
      throttle: 5
    - name: set netbox token fact
      ansible.builtin.set_fact:
        netbox_token: "{{ netbox_auth_token_raw.json.key }}"
  tasks:
    - name: setup demo inventory and hosts
      ansible.builtin.include_role:
        name: "{{ role }}"
      loop_control:
        loop_var: role
      loop: 
        - redhat_cop.controller_configuration.inventories
        - redhat_cop.controller_configuration.hosts

    - name: setup groups
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.groups
      vars:
        controller_groups: "{{ lookup('vars', 'controller_groups_tier' ~ tier) }}"
      loop_control:
        loop_var: tier
      loop: "{{ range(1, controller_group_tiers | int + 1, 1) | list }}"

    - name: setup demo context and launch workflow
      ansible.builtin.include_role:
        name: "{{ role }}"
      loop_control:
        loop_var: role
      loop: 
        - ../roles/manage_demo_context
        - redhat_cop.controller_configuration.workflow_launch