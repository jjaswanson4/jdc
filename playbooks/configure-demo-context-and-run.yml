---

- name: create demo context and run the demo provisioner workflow
  hosts:
    - all
  gather_facts: no
  vars:
    controller_hosts_to_add: []
    controller_groups_to_add: []
  vars_files:
    - vars/demos.yml
  pre_tasks:
    - name: create unique id for demo if not existing
      block:
        - name: create unique id for demo instance
          ansible.builtin.shell:
            cmd: uuidgen | cut -c1-4
          register: demo_uuid_raw
        - name: set unique id fact
          ansible.builtin.set_fact:
            demo_uuid: "{{ demo_uuid_raw.stdout }}"
      when:
        - demo_uuid is not defined
    - name: match demo to display name
      ansible.builtin.set_fact:
        demo_display_name: "{{ demos.display_name }}"
      when:
        - demo == demos.name
      loop_control:
        loop_var: demos
      loop: "{{ available_demos }}"
    - name: set workflow to run | provision
      ansible.builtin.set_fact:
        workflow_to_run: Provision
      when:
        - demo_state is not defined or
          demo_state == 'present'
    - name: set workflow to run | teardown
      ansible.builtin.set_fact:
        workflow_to_run: Teardown
      when:
        - demo_state is defined
        - demo_state == 'absent'
    - name: set workflow to run | reset
      ansible.builtin.set_fact:
        workflow_to_run: Reset
      when:
        - demo_state is defined
        - demo_state == 'reset'
    - name: load demo provisioner vars into tmp var
      ansible.builtin.include_vars:
        file: "vars/demos/{{ demo }}/provisioner.yml"
    - name: set inventories facts
      ansible.builtin.set_fact:
        controller_inventories:
          - name: "Demo {{ demo_uuid }} Inventory"
            organization: "{{ controller_organization }}"
            variables: "{{ lookup('file', 'vars/controller/inventories.yml') | from_yaml | combine( { 'demo_uuid': demo_uuid } ) | combine ( { 'audience': audience } ) }}"
    - name: add inventory to hosts
      ansible.builtin.set_fact:
        controller_hosts_to_add: "{{ controller_hosts_to_add + [ host | combine( { 'inventory': 'Demo ' + demo_uuid + ' Inventory' } ) ] }}"
      loop_control:
        loop_var: host
      loop: "{{ controller_hosts }}"
    - name: build list of groups
      ansible.builtin.set_fact:
        controller_groups_to_add: "{{ controller_groups_to_add | default('[]') + [ group | combine( { 'inventory': 'Demo ' + demo_uuid + ' Inventory' } ) ] }}"
      loop_control:
        loop_var: group
      loop: "{{ controller_groups }}"
    - name: load in satellite vars and group
      block:
        - name: set satellite host and group facts
          ansible.builtin.set_fact:
            satellite_host:
              - name: "{{ audience | lower }}-{{ demo }}-satellite.{{ demo_uuid }}.{{ base_dns_suffix }}"
                inventory: "Demo {{ demo_uuid }} Inventory"
                variables: "{{ lookup('file', 'vars/demos/' + demo + '/satellite.yml') | from_yaml }}"
            satellite_group:
              - name: satellite
                inventory: "Demo {{ demo_uuid }} Inventory"
                hosts:
                  - "{{ audience | lower }}-{{ demo }}-satellite.{{ demo_uuid }}.{{ base_dns_suffix }}"
        - name: add satellite host to main list
          ansible.builtin.set_fact:
            controller_hosts_to_add: "{{ controller_hosts_to_add + satellite_host }}"
      when:
        - satellite_configuration_file is defined
    - name: load in controller vars and group
      block:
        - name: set controller host and group facts
          ansible.builtin.set_fact:
            controller_host:
              - name: "{{ audience | lower }}-{{ demo }}-controller.{{ demo_uuid }}.{{ base_dns_suffix }}"
                inventory: "Demo {{ demo_uuid }} Inventory"
                variables: "{{ lookup('file', 'vars/demos/' + demo + '/controller.yml') | from_yaml }}"
            controller_group:
              - name: controller
                inventory: "Demo {{ demo_uuid }} Inventory"
                hosts:
                  - "{{ audience | lower }}-{{ demo }}-controller.{{ demo_uuid }}.{{ base_dns_suffix }}"
        - name: add controller host to main list
          ansible.builtin.set_fact:
            controller_hosts_to_add: "{{ controller_hosts_to_add + controller_host }}"
      when:
        - controller_configuration_file is defined
    - name: define satellite group even if empty
      ansible.builtin.set_fact:
        satellite_group:
          - name: satellite
            inventory: "Demo {{ demo_uuid }} Inventory"
      when:
        - satellite_configuration_file is not defined
    - name: define controller group even if empty
      ansible.builtin.set_fact:
        controller_group:
          - name: controller
            inventory: "Demo {{ demo_uuid }} Inventory"
      when:
        - controller_configuration_file is not defined
    - name: load in management_plane group
      ansible.builtin.set_fact:
        management_plane_group:
          - name: management_plane
            inventory: "Demo {{ demo_uuid }} Inventory"
            variables: "{{ lookup('file', 'vars/controller/groups.yml') | from_yaml }}"
            children:
              - controller
              - satellite
    - name: add up groups
      ansible.builtin.set_fact:
        controller_groups_to_add: "{{ controller_groups_to_add + satellite_group + controller_group + management_plane_group }}"
    - name: create localhost host
      ansible.builtin.set_fact:
        localhost_host:
          - name: localhost
            inventory: "Demo {{ demo_uuid }} Inventory"
            variables:
              ansible_connection: local
              ansible_python_interpreter: '{  { ansible_playbook_python }}'
    - name: add localhost to hosts list
      ansible.builtin.set_fact:
        controller_hosts_to_add: "{{ controller_hosts_to_add + localhost_host }}"
    - name: set vars for roles
      ansible.builtin.set_fact:
        controller_hosts: "{{ controller_hosts_to_add }}"
        controller_groups: "{{ controller_groups_to_add }}"
    - name: set demo provisioner workflow facts
      ansible.builtin.set_fact:
        controller_workflow_launch_jobs:
          - name: "{{ workflow_to_run }} {{ demo_display_name }} Demo"
            inventory: "Demo {{ demo_uuid }} Inventory"
            wait: "{{ wait_for_workflow | default(false) }}"
            extra_vars:
              audience: "{{ audience }}"
              demo_state: "{{ demo_state | default('present') }}"
              demo_context_state: "{{ demo_context_state | default('present') }}"
              provisioner: "{{ provisioner }}"
              provisioner_email: "{{ provisioner_email }}"
  roles:
   - redhat_cop.controller_configuration.inventories
   - redhat_cop.controller_configuration.hosts
   - redhat_cop.controller_configuration.groups
   - ../roles/manage_demo_context
   - redhat_cop.controller_configuration.workflow_launch