---

# By default, the org 'Demo Provisioner' is created and resources are configured there,
# Use this variable to override this behavior.
# For example, overriding to 'Default' will put the resources into the default controller organization.
controller_organization: Demo Provisioner

# This is the default project name. It is a var so demos can import specific job templates and override the project locally.
# Change this to change the name of the project for the provisioner job templates.
project: Josh's Demos Collection

# This is the default prefix for assets created for this demo.
# Change this variable to use a different prefix.
demo_prefix: Satellite Advanced Architecture

# This is the realitive path to the vars files for this demo.
# Typically this contains a vars file for the provisioner, Satellite, and Controller.
vars_files_path: "vars/demos/{{ demo }}"

# This is the execution environment used for this demo provisioner.
# This execution environment will automatically be configured in Controller.
execution_environment:
  name: Josh's Demos Collection EE
  registry: "{{ ee.registry }}"
  image: joshs-demos-collection-ee
  credential: "{{ ee.credential }}"

# This is the information used for the instance of Controller for the demo.
# This can be the same instance as where the provisioner is deployed, but it's not recommended.
controller_configuration_file: "{{ vars_files_path }}/controller.yml"

# This is the information used for the instance of Satellite for the demo.
# This can be the same instance as where the provisioner is deployed, but it's not recommended.
satellite_configuration_file: "{{ vars_files_path }}/satellite.yml"

base_dns_suffix: demos.lcl
needs_vlan: yes

# This toggles secure logging, for example: when configuring credentials on Ansible Controller.
# Since I'm using my own instance, secure logging isn't a requirement.
controller_configuration_credentials_secure_logging: no

# These are where demo specific components are defined, in hash form. These will automatically be added to the common resources.
# If there is no need for a specific, resource, simply define an empty var, such as `controller_organizations: []`
controller_organizations: []
controller_credential_types: []
controller_execution_environments: []
controller_inventories: []
controller_projects: []
controller_credentials: []
controller_templates: []

controller_hosts:
  - name: "dc1-capsule1.{{ demo_uuid }}.{{ base_dns_suffix }}"
  - name: "dc1-capsule2.{{ demo_uuid }}.{{ base_dns_suffix }}"
  - name: "firewall-capsule1.{{ demo_uuid }}.{{ base_dns_suffix }}"
  - name: "dc1-lb.{{ demo_uuid }}.{{ base_dns_suffix }}"

controller_groups:
  - name: loadbalancers
    hosts:
      - "dc1-lb.{{ demo_uuid }}.{{ base_dns_suffix }}"
    variables:
      cpus: 2
      memory: 4096
  - name: capsules
    hosts:
      - "dc1-capsule1.{{ demo_uuid }}.{{ base_dns_suffix }}"
      - "dc1-capsule2.{{ demo_uuid }}.{{ base_dns_suffix }}"
      - "firewall-capsule1.{{ demo_uuid }}.{{ base_dns_suffix }}"
    variables:
      cpus: 4
      memory: 16384
  - name: dc1
    hosts:
      - "dc1-lb.{{ demo_uuid }}.{{ base_dns_suffix }}"
      - "dc1-capsule1.{{ demo_uuid }}.{{ base_dns_suffix }}"
      - "dc1-capsule2.{{ demo_uuid }}.{{ base_dns_suffix }}"
  - name: rhel
    children:
      - dc1
      - loadbalancers
      - capsules
    variables:
      cpus: 4
      memory_mb: 8192
      os: rhel8
      application: general
      lifecycle_environment: production
      satellite_url: "https://{  { groups['satellite'][0] }}"
      satellite_username: "{  { admin_username }}"
      satellite_password: "{  { admin_password }}"
      satellite_validate_certs: no
      satellite_organization: "{  { audience }}"
      satellite_location: "{  { audience }}"
      provisioning:
        host_group: "{  { os }}/{  { demo_vlan }}"
        organization: "{  { audience }}"
        location: "{  { audience }}"
        method: bootdisk
        dns_domain: "idm.{  { demo_uuid }}.{  { base_dns_suffix }}"
        cpus: "{  { cpus }}"
        memory_mb: "{  { memory_mb }}"
        activation_keys: "ak-{  { application }}-{  { os }}-{  { lifecycle_environment }}"
      firewall:
        state: stopped
        enabled: no
      config_files:
        - hosts
        - resolv.conf
      timesync_ntp_servers:
        - hostname: 0.rhel.pool.ntp.org
          iburst: yes
        - hostname: 1.rhel.pool.ntp.org
          iburst: yes
        - hostname: 2.rhel.pool.ntp.org
          iburst: yes
        - hostname: 3.rhel.pool.ntp.org
          iburst: yes
      run_additional_roles: no
      cockpit_packages:
        - cockpit-storaged
        - cockpit-pcp
        - cockpit-sosreport
        - cockpit-networkmanager
        - cockpit-packagekit
  - name: demo_hosts
    children:
      - rhel
 
controller_workflows:
  - name: Provision Satellite Advanced Architecture Demo
    organization: "{{ controller_organization }}"
    state: "{{ controller_state | default('present') }}"
    ask_inventory_on_launch: yes
    ask_variables_on_launch: yes
    extra_vars:
      demo: satellite-aa
    simplified_workflow_nodes:
      - identifier: Create CMDB Records
        unified_job_template: Manage CMDB Records
        limit: 'demo_hosts:management_plane'
        credentials:
          - Demo Provisioner Netbox Credentials
          - Demo Provisioner vCenter Credentials
        # success_nodes:
        #   - Create DNS Records
        failure_nodes:
          - Send Failure Email About 'Create CMDB Records'
      - identifier: Send Failure Email About 'Create CMDB Records'
        unified_job_template: Send Provisioner Email
        extra_data:
          failed_at_step: Create CMDB Records
