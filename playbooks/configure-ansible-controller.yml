---

- name: configure controller
  hosts:
    - all
  gather_facts: no
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    ansible_connection: local
  pre_tasks:
    - name: run bootstrap tasks
      block:
        - name: super secure way to grab the manifest
          ansible.builtin.get_url:
            url: http://satellite.lab.msp.redhat.com/pub/controller-manifest.zip
            dest: /tmp/controller-manifest.zip
        - name: apply manifest to controller
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.license
      when:
        - bootstrap_controller is defined
        - bootstrap_controller
    - name: create credentials for galaxy auth if needed
      block:
        - name: grab token from automation hub
          ansible.builtin.uri:
            url: "{{ automation_hub.url }}/api/galaxy/v3/auth/token/"
            validate_certs: "{{ automation_hub.validate_certs | default('no') }}"
            user: "{{ automation_hub.username }}"
            password: "{{ automation_hub.password }}"
            force_basic_auth: yes
            method: POST
          register: automation_hub_token
        - name: create credential in ansible controller
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.credentials
          vars:
            controller_credentials:
              - name: "{{ audience }} Automation Hub Credentials"
                organization: Default
                credential_type: Ansible Galaxy/Automation Hub API Token
                inputs:
                  url: "{{ automation_hub.url }}"
                  token: "{{ automation_hub_token.json.token }}"
      when:
        - setup_hub_credentials is defined
        - setup_hub_credentials
  tasks:
    - name: ansible controller configuration block
      block:
        - name: include pre-inventory sync configuration roles
          ansible.builtin.include_role:
            name: "{{ role }}"
          loop_control:
            loop_var: role
          loop:
            - redhat_cop.ah_configuration.settings
            - redhat_cop.controller_configuration.organizations
            - redhat_cop.controller_configuration.credential_types
            - redhat_cop.controller_configuration.credentials
            - redhat_cop.controller_configuration.execution_environments
            - redhat_cop.controller_configuration.teams
            - redhat_cop.controller_configuration.users
            - redhat_cop.controller_configuration.inventories

        - name: include roles to setup inventory source if defined
          ansible.builtin.include_role:
            name: "{{ role }}"
          loop_control:
            loop_var: role
          loop:        
            - redhat_cop.controller_configuration.inventory_sources
            - redhat_cop.controller_configuration.inventory_source_update
          when:
            controller_inventory_sources is defined

        - name: include roles to create hosts if statically defined
          ansible.builtin.include_role:
            name: "{{ role }}"
          loop_control:
            loop_var: role
          loop:        
            - redhat_cop.controller_configuration.hosts
          when:
            controller_inventory_sources is not defined

        - name: include post-inventory sync configuration roles
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.groups
          vars:
            controller_groups: "{{ lookup('vars', 'controller_groups_tier' ~ tier) }}"
          loop_control:
            loop_var: tier
          loop: "{{ range(1, controller_group_tiers | int + 1, 1) | list }}"

        - name: include post-inventory sync/groups configuration roles
          ansible.builtin.include_role:
            name: "{{ role }}"
          loop_control:
            loop_var: role
          loop: 
            - redhat_cop.controller_configuration.projects
            - redhat_cop.controller_configuration.job_templates
            - redhat_cop.controller_configuration.workflow_job_templates
            - redhat_cop.controller_configuration.roles