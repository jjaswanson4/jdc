# Automation Controller Nodes
# There are two valid node_types that can be assigned for this group.
# A node_type=control implies that the node will only be able to run
# project and inventory updates, but not regular jobs.
# A node_type=hybrid will have the ability to run everything.
# If you do not define the node_type, it defaults to hybrid.
#
# control.example node_type=control
# hybrid.example  node_type=hybrid
# hybrid2.example <- this will default to hybrid
[automationcontroller]
control-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} ansible_connection=local
control-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
control-node-3.{{ demo_uuid }}.{{ base_dns_suffix }}

[automationcontroller:vars]
node_type=control
peers=instance_group_dc1

# Execution Nodes
# There are two valid node_types that can be assigned for this group.
# A node_type=hop implies that the node will forward jobs to an execution node.
# A node_type=execution implies that the node will be able to run jobs.
# If you do not define the node_type, it defaults to execution.
#
# hop.example        node_type=hop
# execution.example  node_type=execution
# execution2.example <- this will default to execution
[execution_nodes]
# Direct connected to control plane (Control nodes are "in" DC1)
dc1-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} peers=dc1-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
dc1-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

# Hop to DC2
dc2-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop peers=dc2-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
dc2-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop

# DC2 execution nodes
dc2-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} peers=dc2-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
dc2-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

# Hop to Azure
azure-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop peers=azure-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop

# Azure execution nodes
azure-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} peers=azure-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

# Hop to AWS
aws-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop peers=aws-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop

# AWS execution nodes
aws-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} peers=aws-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

# Hop to mfgplant1
mfgplant1-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }} node_type=hop

# mfgplant1 execution nodes
mfgplant1-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_dc1]
dc1-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
dc1-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_dc2]
dc2-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
dc2-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_dc2:vars]
peers=dc2_hop

[instance_group_azure]
azure-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_azure:vars]
peers=azure_hop

[instance_group_aws]
aws-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-execution-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_aws:vars]
peers=aws_hop

[instance_group_mfgplant1]
mfgplant1-execution-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}

[instance_group_mfgplant1:vars]
peers=mfgplant1_hop

[hop_nodes]
dc2-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
dc2-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}
mfgplant1-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}

[hop_nodes:vars]
peers=automationcontroller

[dc2_hop]
dc2-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
dc2-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[azure_hop]
azure-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
azure-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[aws_hop]
aws-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}
aws-hop-node-2.{{ demo_uuid }}.{{ base_dns_suffix }}

[mfgplant1_hop]
mfgplant1-hop-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}

[automationhub]

[database]
database-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}

[servicescatalog_workers]

# Single Sign-On
# If sso_redirect_host is set, that will be used for application to connect to
# SSO for authentication. This must be reachable from client machines.
#
# ssohost.example sso_redirect_host=<host/ip>
[sso]

[all:vars]
admin_password='{{ controller_install.admin_password | default('') }}'
ansible_user={{ ansible_user }}
ansible_password='{{ ansible_password }}'

pg_host='database-node-1.{{ demo_uuid }}.{{ base_dns_suffix }}'
pg_port='{{ controller_install.pg.port | default('5432') }}'
pg_database='{{ controller_install.pg.database | default('awx') }}'
pg_username='{{ controller_install.pg.username | default('awx') }}'
pg_password='{{ controller_install.pg.password | default('awx') }}'
pg_sslmode='{{ controller_install.pg.sslmode | default('prefer') }}'

# Execution Environment Configuration
# Credentials for container registry to pull execution environment images from,
# registry_username and registry_password are required for registry.redhat.io
registry_url='registry.redhat.io'
registry_username='{{ redhat_registry_username | default('') }}'
registry_password='{{ redhat_registry_password | default('') }}'

# Receptor Configuration
#
receptor_listener_port=27199

# Automation Hub Configuration
#

automationhub_admin_password=''

automationhub_pg_host=''
automationhub_pg_port=''

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password=''
automationhub_pg_sslmode='prefer'

# When using Single Sign-On, specify the main automation hub URL that
# clients will connect to (e.g. https://<load balancer host>).
# If not specified, the first node in the [automationhub] group will be used.
#
# automationhub_main_url = ''

# By default if the automation hub package and its dependencies
# are installed they won't get upgraded when running the installer
# even if newer packages are available. One needs to run the ./setup.sh
# script with the following set to True.
#
# automationhub_upgrade = False

# By default when one uploads collections to Automation Hub
# an admin needs to approve it before it is made available
# to the users. If one wants to disble the content approval
# flow, the following setting should be set to False.
#
# automationhub_require_content_approval = True

# At import time collections can go through a series of checks.
# Behaviour is driven by galaxy-importer.cfg configuration.
# Example are ansible-doc, ansible-lint, flake8, ...
#
# The following parameter allow one to drive this configuration.
# This variable is expected to be a dictionnary.
#
# automationhub_importer_settings = None

# The default install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False

# The default install will deploy a TLS enabled Automation Hub.
# Unless specified otherwise the HSTS web-security policy mechanism
# will be enabled. This setting allows one to disable it if need be.
#
# automationhub_disable_hsts = False

# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False

# SSL-related variables

# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt

# Certificate and key to install in nginx for the web UI and API
# web_server_ssl_cert=/path/to/tower.cert
# web_server_ssl_key=/path/to/tower.key

# Certificate and key to install in Automation Hub node
# automationhub_ssl_cert=/path/to/automationhub.cert
# automationhub_ssl_key=/path/to/automationhub.key

# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key
# Keystore file to install in SSO node
# sso_custom_keystore_file='/path/to/sso.jks'

# The default install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
# sso_keystore_password=''

# Single-Sign-On configuration
sso_console_admin_password=''